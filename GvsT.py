# -*- coding: utf-8 -*-
"""Reaction_balancer.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B3GDjYsh4UsiJ7xXVIBxCHsCWTCjX2En
"""

import re
import pandas as pd
from sympy import Matrix, lcm
from collections import OrderedDict
import numpy as np
import matplotlib.pyplot as plt
import webbrowser


document = 'https://raw.githubusercontent.com/rafa3008/GvsTModQ/main/comp.csv'
data_b = pd.read_csv(document)
data_b

path_ReadMe= 'https://github.com/rafa3008/GvsTModQ/blob/main/README.md'
path_db='https://github.com/rafa3008/GvsTModQ/blob/main/comp.csv'
compounds = data_b["Fórmula del compuesto"].values
# print(compounds)
"CH2Cl2" in compounds 
# Se espera que devuelva True

"""
 Código modificado tomado de: 
 https://medium.com/swlh/balancing-chemical-equations-with-python-837518c9075b.
"""
element_list = []
element_matrix = []
indices = []
therm_list = []
compounds_indexes=[]
la_lista =[]
elements_reaction = OrderedDict()
running = True
# while running:
print("Ingrese los reactivos a emplear, "
            "recuerde el correcto uso de la notación química")
print("Un ejemplo del input a ingresar es  CaO + H2O")
print("\nSi desea conocer sobre el código y los compuestos presentes en la base de datos, "
    "oprima h, de lo contrario oprima ENTER")

Ver=input()
if Ver in {'h'}:
    webbrowser.open_new(path_ReadMe)
    webbrowser.open_new_tab(path_db)
else:
    pass

reactants = input("Reactivos: ")

  # if reactants.lower() != "h":

print("Ingrese los productos de su reacción, "
            "recuerde el correcto uso de la notación química")
products = input("Productos: ")

reactants = reactants.replace(' ', '').split("+")
products = products.replace(' ', '').split("+")
index = data_b.index

for reactivo in reactants:
  if reactivo in compounds:
    condition = data_b["Fórmula del compuesto"] == reactivo
    reactant_index = index[condition]
    reactant_index = reactant_index.tolist()
    compounds_indexes.append(reactant_index)
    for compounds_index in compounds_indexes:
      for compound_index in compounds_index:
        indices.append(compound_index)
    
    
    
    for element_index in indices:
      info_termodinamica = data_b.iloc[[element_index],1:].values
      valor_termodinamica = info_termodinamica.tolist()
      elements_reaction[reactivo] = valor_termodinamica
# {h2o: [a, b, c.....], o2: [a, b, c, d, e...]} 
  
  else:
    raise Exception(f"El compouesto {reactivo} no se encuentra"
      " en la base de datos")

for producto in products:
  if producto in compounds:
    condition = data_b["Fórmula del compuesto"] == producto
    product_index = index[condition]
    product_index = product_index.tolist()
    compounds_indexes.append(product_index)
    for compounds_index in compounds_indexes:
      for compound_index in compounds_index:
        indices.append(compound_index)
    for element_index in indices:
      info_termodinamica = data_b.iloc[[element_index],1:].values
      valor_termodinamica = info_termodinamica.tolist()
      elements_reaction[producto] = valor_termodinamica
  else:
    raise Exception(f"El compouesto {producto} no se encuentra"
      " en la base de datos")
   


A = ([item[0][0] for item in  elements_reaction.values()])
B = ([item[0][1] for item in  elements_reaction.values()])
C = ([item[0][2] for item in  elements_reaction.values()])
D = ([item[0][3] for item in  elements_reaction.values()])
E = ([item[0][4] for item in  elements_reaction.values()])
F = ([item[0][5] for item in  elements_reaction.values()])
G = ([item[0][6] for item in  elements_reaction.values()])
H = ([item[0][7] for item in  elements_reaction.values()])


def add_to_matrix(element, index, count, side):
    """Función que permite adicionar elementos a una matriz"""

    if index == len(element_matrix):
        element_matrix.append([])
        for x in element_list:
            element_matrix[index].append(0)
    if element not in element_list:
        element_list.append(element)
        for i in range(len(element_matrix)):
            element_matrix[i].append(0)
    column = element_list.index(element)
    element_matrix[index][column] += count * side


def find_elements(segment, index, multiplier, side):
    """
    Función que permite obtener los elementos químicos de un grupo 
    funcional complejo del compuesto
    """

    elements_and_numbers = re.split('([A-Z][a-z]?)', segment)
    i = 0
    while i < len(elements_and_numbers) - 1:  # last element always blank
        i += 1
        if len(elements_and_numbers[i]) > 0:
            if elements_and_numbers[i + 1].isdigit():
                count = int(elements_and_numbers[i + 1]) * multiplier
                add_to_matrix(elements_and_numbers[i], index, count, side)
                i += 1
            else:
                add_to_matrix(elements_and_numbers[i], index, multiplier, side)


def compound_decipher(compound, index, side):
    """
    Permite la discriminación de un compuesto químico en 
    términos de sus grupos funcionales
    """

    segments = re.split('(\([A-Za-z0-9]*\)[0-9]*)', compound)
    for segment in segments:
        if segment.startswith("("):
            segment = re.split('\)([0-9]*)', segment)
            multiplier = int(segment[1])
            segment = segment[0][1:]
        else:
            multiplier = 1
        find_elements(segment, index, multiplier, side)


for i in range(len(reactants)):
    compound_decipher(reactants[i], i, 1)
for i in range(len(products)):
    compound_decipher(products[i], i + len(reactants), -1)
elementMatrix = Matrix(element_matrix)
elementMatrix = elementMatrix.transpose()
solution = elementMatrix.nullspace()[0]
multiple = lcm([val.q for val in solution])
solution = multiple * solution
coEffi = solution.tolist()
output = ""
for i in range(len(reactants)):
    output += str(coEffi[i][0]) + " " + reactants[i]
    if i < len(reactants) - 1:
        output += " + "
output += " -> "
for i in range(len(products)):
    output += str(coEffi[i + len(reactants)][0]) + " " + products[i]
    if i < len(products) - 1:
        output += " + "
print('La reacción balaceada es:')
print()
print(output)
print("\n¿Se encuentra satisfechos con los coeficientes mostrados?")
print("En caso de que no lo esté, "
          "ingrese el número por el que desea multiplicar todos los coeficientes")
re_balance = float(input("Multiplicar por "))
print()

if re_balance:
  solution = re_balance * solution
  coEffi = solution.tolist()
  output = ""
  for i in range(len(reactants)):
    output += str(f"{coEffi[i][0]:.2f}") + " "+ reactants[i]
    if i < len(reactants) - 1:
        output += " + "
  output += " -> "
  for i in range(len(products)):
      output += str(f"{coEffi[i + len(reactants)][0]:.2f}") + " "+ products[i]
      if i < len(products) - 1:
          output += " + "
      print(output)
else:
  print(output)
# else:
# print(compounds)


Coef_oper=[]
for i in range(len(reactants)):
    Coef_oper.append(-1*coEffi[i][0])

for i in range(len(products)):
    Coef_oper.append(coEffi[i+len(reactants)][0])



rang=np.linspace(298,1000,500)
def H_cp(T):
    H_t=0
    T=T/1000
    for i in range(len(Coef_oper)):
        H_t += Coef_oper[i]*(A[i]*T + (B[i]*T**2)/2 + (C[i]*T**3)/3 + (D[i]*T**4)/4 - E[i]/T + F[i]) 
    return H_t

def H_est():
    H_s=0
    for i in range(len(Coef_oper)):
        H_s += H[i]*Coef_oper[i]
    return H_s

def S(T):
    T=T/1000
    S_t=0
    for i in range(len(Coef_oper)):
        S_t += Coef_oper[i]*(A[i]*np.log(T) + B[i]*T + (C[i]*T**2)/2 + (D[i]*T**3)/3 - E[i]/(2*T**2) + G[i])
    return S_t/1000

def G1(t):
    return H_est() - t*S(298)

def G2(t):
    return H_cp(t) - t*S(t)

T_maxs = ([item[0][9] for item in  elements_reaction.values()])
print('\nEl límite máximo de temperatura para los compuestos escogidos es:')
print(T_maxs)
print('\nSeleccione una operación a realizar:')
print('\nDigite "Op1" para cálculo de G a condiciones estándar (298K)')
print('Digite "Op2" Generar curva G vs T, con H° y S°')
print('Digite "Op3" Generar curva G vs T, con H(T) y S(T)')
print('Digite "all", si desea ver las curvas de Op1 y Op2 juntas')
print('Digite "Change" si desea modificar el rango máximo de temperatura de las curvas Op1 y Op2')

Opci=input()

if Opci in {'Op1'}:
    print('La energía libre de reacción es'+' '+str(G1(298)))
elif Opci in {'Op2'}:
    plt.grid()
    plt.plot(rang,G1(rang))
    plt.xlabel("T(K)")
    plt.ylabel('G(kJ/mol)')
elif Opci in {'Op3'}:
    plt.grid()
    plt.plot(rang,G2(rang))
    plt.xlabel("T(K)")
    plt.ylabel('G(kJ/mol)')
elif Opci in {'all'}:
    plt.grid()
    plt.plot(rang,G1(rang),label='H° y S°')
    plt.plot(rang,G2(rang),label='H(T) y S(T)')
    plt.legend()
    plt.xlabel("T(K)")
    plt.ylabel('G(kJ/mol)')
elif Opci in {'Change'}:
    print('Defina el nuevo límite máximo de temperatura:')
    lim_max=float(input())
    rang2=np.linspace(298,lim_max,500)
    plt.grid()
    plt.plot(rang2,G1(rang2),label='H° y S°')
    plt.plot(rang2,G2(rang2),label='H(T) y S(T)')
    plt.legend()
    plt.xlabel("T(K)")
    plt.ylabel('G(kJ/mol)')
    
plt.show()



















